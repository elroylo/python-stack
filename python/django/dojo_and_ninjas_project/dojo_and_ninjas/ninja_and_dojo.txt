In [1]: from dojo_and_ninjas.models import *

In [2]: Dojo.objects.create(name = "San Jose Dojo", city = "San Jose", state = "Califor 
   ...: nia", age = 10)
Out[2]: <Dojo: Dojo object (1)>

In [3]: Ninja.objects.create(first_name = "Chris", last_name = "Bautista")
---------------------------------------------------------------------------
IntegrityError                            Traceback (most recent call last)
C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in _execute(self, sql, params, *ignored_wrapper_args)
     85             else:
---> 86                 return self.cursor.execute(sql, params)
     87 

C:\Program Files\Python38\lib\site-packages\django\db\backends\sqlite3\base.py in execute(self, query, params)
    395         query = self.convert_query(query)
--> 396         return Database.Cursor.execute(self, query, params)
    397

IntegrityError: NOT NULL constraint failed: dojo_and_ninjas_ninja.dojo_id

The above exception was the direct cause of the following exception:

IntegrityError                            Traceback (most recent call last)
<ipython-input-3-e6d5062021c6> in <module>
----> 1 Ninja.objects.create(first_name = "Chris", last_name = "Bautista")

C:\Program Files\Python38\lib\site-packages\django\db\models\manager.py in manager_method(self, *args, **kwargs)
     80         def create_method(name, method):
     81             def manager_method(self, *args, **kwargs):
---> 82                 return getattr(self.get_queryset(), name)(*args, **kwargs)      
     83             manager_method.__name__ = method.__name__
     84             manager_method.__doc__ = method.__doc__

C:\Program Files\Python38\lib\site-packages\django\db\models\query.py in create(self, **kwargs)
    431         obj = self.model(**kwargs)
    432         self._for_write = True
--> 433         obj.save(force_insert=True, using=self.db)
    434         return obj
    435

C:\Program Files\Python38\lib\site-packages\django\db\models\base.py in save(self, force_insert, force_update, using, update_fields)
    743                 update_fields = frozenset(loaded_fields)
    744 
--> 745         self.save_base(using=using, force_insert=force_insert,
    746                        force_update=force_update, update_fields=update_fields)  
    747     save.alters_data = True

C:\Program Files\Python38\lib\site-packages\django\db\models\base.py in save_base(self, 
raw, force_insert, force_update, using, update_fields)
    780             if not raw:
    781                 parent_inserted = self._save_parents(cls, using, update_fields)
--> 782             updated = self._save_table(
    783                 raw, cls, force_insert or parent_inserted,
    784                 force_update, using, update_fields,

C:\Program Files\Python38\lib\site-packages\django\db\models\base.py in _save_table(self, raw, cls, force_insert, force_update, using, update_fields)
    885
    886             returning_fields = meta.db_returning_fields
--> 887             results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
    888             for result, field in zip(results, returning_fields):
    889                 setattr(self, field.attname, result)

C:\Program Files\Python38\lib\site-packages\django\db\models\base.py in _do_insert(self, manager, using, fields, returning_fields, raw)
    922         return the newly created data for the model.
    923         """
--> 924         return manager._insert(
    925             [self], fields=fields, returning_fields=returning_fields,
    926             using=using, raw=raw,

C:\Program Files\Python38\lib\site-packages\django\db\models\manager.py in manager_method(self, *args, **kwargs)
     80         def create_method(name, method):
     81             def manager_method(self, *args, **kwargs):
---> 82                 return getattr(self.get_queryset(), name)(*args, **kwargs)      
     83             manager_method.__name__ = method.__name__
     84             manager_method.__doc__ = method.__doc__

C:\Program Files\Python38\lib\site-packages\django\db\models\query.py in _insert(self, objs, fields, returning_fields, raw, using, ignore_conflicts)
   1202         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)  
   1203         query.insert_values(fields, objs, raw=raw)
-> 1204         return query.get_compiler(using=using).execute_sql(returning_fields)    
   1205     _insert.alters_data = True
   1206     _insert.queryset_only = False

C:\Program Files\Python38\lib\site-packages\django\db\models\sql\compiler.py in execute_sql(self, returning_fields)
   1390         with self.connection.cursor() as cursor:
   1391             for sql, params in self.as_sql():
-> 1392                 cursor.execute(sql, params)
   1393             if not self.returning_fields:
   1394                 return []

C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in execute(self, sql, params)
     98     def execute(self, sql, params=None):
     99         with self.debug_sql(sql, params, use_last_executed_query=True):
--> 100             return super().execute(sql, params)
    101
    102     def executemany(self, sql, param_list):

C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in execute(self, sql, params)
     66
     67     def execute(self, sql, params=None):
---> 68         return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
     69
     70     def executemany(self, sql, param_list):

C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in _execute_with_wrappers(self, sql, params, many, executor)
     75         for wrapper in reversed(self.db.execute_wrappers):
     76             executor = functools.partial(wrapper, executor)
---> 77         return executor(sql, params, many, context)
     78
     79     def _execute(self, sql, params, *ignored_wrapper_args):

C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in _execute(self, sql, params, *ignored_wrapper_args)
     84                 return self.cursor.execute(sql)
     85             else:
---> 86                 return self.cursor.execute(sql, params)
     87 
     88     def _executemany(self, sql, param_list, *ignored_wrapper_args):

C:\Program Files\Python38\lib\site-packages\django\db\utils.py in __exit__(self, exc_type, exc_value, traceback)
     88                 if dj_exc_type not in (DataError, IntegrityError):
     89                     self.wrapper.errors_occurred = True
---> 90                 raise dj_exc_value.with_traceback(traceback) from exc_value     
     91
     92     def __call__(self, func):

C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in _execute(self, sql, params, *ignored_wrapper_args)
     84                 return self.cursor.execute(sql)
     85             else:
---> 86                 return self.cursor.execute(sql, params)
     87
     88     def _executemany(self, sql, param_list, *ignored_wrapper_args):

C:\Program Files\Python38\lib\site-packages\django\db\backends\sqlite3\base.py in execute(self, query, params)
    394             return Database.Cursor.execute(self, query)
    395         query = self.convert_query(query)
--> 396         return Database.Cursor.execute(self, query, params)
    397
    398     def executemany(self, query, param_list):

IntegrityError: NOT NULL constraint failed: dojo_and_ninjas_ninja.dojo_id

In [4]: this_dojo = Dojo.objects.get(id=1)

In [5]: Ninja.objects.create(dojo = this_dojo, first_name = "Chris", last_name = "Bauti 
   ...: sta")
Out[5]: <Ninja: Ninja object (1)>

In [6]: Ninja.objects.create(dojo = Dojo.objects.get(id=1), first_name = "John", last_n 
   ...: ame = "Smith")
Out[6]: <Ninja: Ninja object (2)>

In [7]: Ninja.objects.create(dojo = Dojo.objects.get(id=1), first_name = "George", last 
   ...: _name = "Arias")
Out[7]: <Ninja: Ninja object (3)>

In [8]: Dojo.objects.create(name = "San Francisco Dojo", city = "San Francisco", state  
   ...: = "California", age = 5)
Out[8]: <Dojo: Dojo object (2)>

In [9]: Dojo.objects.create(name = "Oakland Dojo", city = "Oakland", state = "Californi 
   ...: a", age = 7)
Out[9]: <Dojo: Dojo object (3)>

In [10]: Ninja.objects.create(dojo = Dojo.objects.get(id=2), first_name = "Greg", last_ 
    ...: name = "Jones")
Out[10]: <Ninja: Ninja object (4)>

In [11]: Ninja.objects.create(dojo = Dojo.objects.get(id=2), first_name = "Randy", last 
    ...: _name = "Kirkoff")
Out[11]: <Ninja: Ninja object (5)>

In [12]: Ninja.objects.create(dojo = Dojo.objects.get(id=2), first_name = "Harry", last 
    ...: _name = "Potter")
Out[12]: <Ninja: Ninja object (6)>

In [13]: Ninja.objects.create(dojo = Dojo.objects.get(id=3), first_name = "Hermanie", l 
    ...: ast_name = "Granger")
Out[13]: <Ninja: Ninja object (7)>

In [14]: Ninja.objects.create(dojo = Dojo.objects.get(id=3), first_name = "Will", last_ 
    ...: name = "Neff")
Out[14]: <Ninja: Ninja object (8)>

In [15]: Ninja.objects.create(dojo = Dojo.objects.get(id=3), first_name = "Spongebob",  
    ...: last_name = "Squarepants")
Out[15]: <Ninja: Ninja object (9)>

In [16]: Dojo.objects.all()
Out[16]: <QuerySet [<Dojo: Dojo object (1)>, <Dojo: Dojo object (2)>, <Dojo: Dojo object (3)>]>

In [17]: Ninja.objects.all()
Out[17]: <QuerySet [<Ninja: Ninja object (1)>, <Ninja: Ninja object (2)>, <Ninja: Ninja 
object (3)>, <Ninja: Ninja object (4)>, <Ninja: Ninja object (5)>, <Ninja: Ninja object 
(6)>, <Ninja: Ninja object (7)>, <Ninja: Ninja object (8)>, <Ninja: Ninja object (9)>]> 

In [18]: Dojo.objects.first()
Out[18]: <Dojo: Dojo object (1)>

In [19]: Dojo.objects.last()
Out[19]: <Dojo: Dojo object (3)>

In [20]: Ninja.objects.last()
Out[20]: <Ninja: Ninja object (9)>

In [21]: Dojo.objects.get(id=3)
Out[21]: <Dojo: Dojo object (3)>

In [22]: Dojo.objects.get(id=3).ninjas
Out[22]: <django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager at 0x23829668b20>

In [23]: Dojo.objects.get(id=3).ninja
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-23-06709b40456e> in <module>
----> 1 Dojo.objects.get(id=3).ninja

AttributeError: 'Dojo' object has no attribute 'ninja'

In [24]: Dojo.objects.get(id=3).ninjas.all()
Out[24]: <QuerySet [<Ninja: Ninja object (7)>, <Ninja: Ninja object (8)>, <Ninja: Ninja 
object (9)>]>

In [1]: from dojo_and_ninjas.models import *

In [2]: Dojo.objects.create(name = "Los Angeles Dojo", city = "Los Angeles", state = "C 
   ...: alifornia", age = 6, description = "The coding dojo for Los Angeles")
Out[2]: <Dojo: Dojo object (4)>