In [1]: from dojo_and_ninjas.models import *
---------------------------------------------------------------------------
ModuleNotFoundError                       Traceback (most recent call last)
<ipython-input-1-7b49749d8b5a> in <module>
----> 1 from dojo_and_ninjas.models import *

ModuleNotFoundError: No module named 'dojo_and_ninjas'

In [2]: from bookapp.models import *
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
<ipython-input-2-c8e965bd333a> in <module>
----> 1 from bookapp.models import *

~\Documents\python_stack\python\django\books_and_authors\bookapp\models.py in <module>
      3 # Create your models here.
      4
----> 5 class Book(models.Model):
      6     title = models.CharField(max_length=255)
      7     created_at = models.DateTimeField(auto_now_add=True)

C:\Program Files\Python38\lib\site-packages\django\db\models\base.py in __new__(cls, nam
    110             if app_config is None:
    111                 if not abstract:

RuntimeError: Model class bookapp.models.Book doesn't declare an explicit app_label and 't in an application in INSTALLED_APPS.

In [3]: from books_and_authors.models import *
---------------------------------------------------------------------------
ModuleNotFoundError                       Traceback (most recent call last)
<ipython-input-3-4a1dc0d49c43> in <module>
----> 1 from books_and_authors.models import *

ModuleNotFoundError: No module named 'books_and_authors.models'

In [4]: 

In [4]: from bookapp.models import *
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
<ipython-input-4-c8e965bd333a> in <module>
----> 1 from bookapp.models import *

~\Documents\python_stack\python\django\books_and_authors\bookapp\models.py in <module>  
      1 from django.db import models
      2
----> 3 class Book(models.Model):
      4     title = models.CharField(max_length=255)
      5     created_at = models.DateTimeField(auto_now_add=True)
C:\Program Files\Python38\lib\site-packages\django\db\models\base.py in __new__(cls, nam
bases, attrs, **kwargs)
    110             if app_config is None:
    111                 if not abstract:
--> 112                     raise RuntimeError(
    114                         "app_label and isn't in an application in "

RuntimeError: Model class bookapp.models.Book doesn't declare an explicit app_label and 't in an application in INSTALLED_APPS.

PS C:\Users\Elroy Dell Laptop\Documents\python_stack\python\django\books_and_authors> pyn manage.py makemigrations
Migrations for 'bookapp':
  bookapp\migrations\0001_initial.py
    - Create model Book
    - Create model Author
PS C:\Users\Elroy Dell Laptop\Documents\python_stack\python\django\books_and_authors> pyn manage.py migrate       
Operations to perform:
  Apply all migrations: admin, auth, bookapp, contenttypes, sessions
Running migrations:
  Applying bookapp.0001_initial... OK
PS C:\Users\Elroy Dell Laptop\Documents\python_stack\python\django\books_and_authors> pyn manage.py shell
Python 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 23:11:46) [MSC v.1916 64 bit (AMD64)]   
Type 'copyright', 'credits' or 'license' for more information
IPython 7.10.2 -- An enhanced Interactive Python. Type '?' for help.

In [1]: Book.objects.create(title="The little boy who cried wolf")
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-1-ec9aff5fc22d> in <module>

NameError: name 'Book' is not defined
In [2]: Books.objects.create(title="The little boy who cried wolf")
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-2-393a46f76126> in <module>
----> 1 Books.objects.create(title="The little boy who cried wolf")
NameError: name 'Books' is not defined

In [3]: exit
PS C:\Users\Elroy Dell Laptop\Documents\python_stack\python\django\books_and_authors> pyn manage.py makemigrations
No changes detected
PS C:\Users\Elroy Dell Laptop\Documents\python_stack\python\django\books_and_authors> pyn manage.py migrate       
Operations to perform:
  Apply all migrations: admin, auth, bookapp, contenttypes, sessions
Running migrations:
  No migrations to apply.
PS C:\Users\Elroy Dell Laptop\Documents\python_stack\python\django\books_and_authors> pyn manage.py shell
Python 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 23:11:46) [MSC v.1916 64 bit (AMD64)]   
Type 'copyright', 'credits' or 'license' for more information
IPython 7.10.2 -- An enhanced Interactive Python. Type '?' for help.

In [1]: from bookapp.models import *

In [2]: Books.objects.create(title="The little boy who cried wolf")
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-2-393a46f76126> in <module>
----> 1 Books.objects.create(title="The little boy who cried wolf")

NameError: name 'Books' is not defined

In [3]: Book.objects.create(title="The little boy who cried wolf")
Out[3]: <Book: Book object (1)>

In [4]: Author.objects.create(first_name="John", last_name = "Mayor")
Out[4]: <Author: Author object (1)>

In [5]: this_book = books.objects.get(id=1)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-5-f05e365b01de> in <module>
----> 1 this_book = books.objects.get(id=1)

NameError: name 'books' is not defined

In [6]: this_book = book.objects.get(id=1)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-6-3df7bce832eb> in <module>
----> 1 this_book = book.objects.get(id=1)

NameError: name 'book' is not defined

In [7]: this_book = Book.objects.get(id=`)
  File "<ipython-input-7-3da9a14c1a92>", line 1
    this_book = Book.objects.get(id=`)
                                    ^
SyntaxError: invalid syntax


In [8]: this_book = Book.objects.get(id=1)

In [9]: this_author = Author.objects.get(id=1)

In [10]: this_author.Book.add(this_book)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-10-10b88f7156e2> in <module>
----> 1 this_author.Book.add(this_book)

AttributeError: 'Author' object has no attribute 'Book'

In [11]: this_author.books.add(this_book)

In [12]: this_book.publishers.all()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-12-58caf2ca93f2> in <module>
----> 1 this_book.publishers.all()

AttributeError: 'Book' object has no attribute 'publishers'

In [13]: this_book.Author.all()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-13-4c57973cdb2f> in <module>
----> 1 this_book.Author.all()

AttributeError: 'Book' object has no attribute 'Author'

In [14]: this_book.author.all()
Out[14]: <QuerySet [<Author: Author object (1)>]>

In [15]: Book.objects.create(title="Ip man")
Out[15]: <Book: Book object (2)>

In [16]: Author.objects.create(first_name="Ip", last_name = "Man")
Out[16]: <Author: Author object (2)>

In [17]: this_book = Book.objects.get(id=2)

In [18]: this_author = Author.objects.get(id=2)

In [20]: Book.objects.create(title="The Man in the mirror")
Out[20]: <Book: Book object (3)>

In [21]: Author.objects.create(first_name="Lil", last_name = "Wayne")
Out[21]: <Author: Author object (3)>

In [22]: this_book = Book.objects.get(id=3)

In [23]: this_author = Author.objects.get(id=3)

In [24]: this_author.books.add(this_book)

In [25]:                                                               In [25]: Author.oIn [25]: Author.objects.create(first)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-25-9d67ee14b202> in <module>
----> 1 Author.objects.create(first)

NameError: name 'first' is not defined

In [26]: Book.objects.create(title="PHP")
---------------------------------------------------------------------------
OperationalError                          Traceback (most recent call last)
C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in _execute(self, sql, params, *ignored_wrapper_args)
     85             else:
---> 86                 return self.cursor.execute(sql, params)
     87

C:\Program Files\Python38\lib\site-packages\django\db\backends\sqlite3\base.py in execute(self, query, params)
    395         query = self.convert_query(query)
--> 396         return Database.Cursor.execute(self, query, params)
    397 

OperationalError: database is locked

The above exception was the direct cause of the following exception:

OperationalError                          Traceback (most recent call last)
<ipython-input-26-cc6f5b776cf5> in <module>
----> 1 Book.objects.create(title="PHP")

C:\Program Files\Python38\lib\site-packages\django\db\models\manager.py in manager_method(self, *args, **kwargs)
     80         def create_method(name, method):
     81             def manager_method(self, *args, **kwargs):
---> 82                 return getattr(self.get_queryset(), name)(*args, **kwargs)      
     83             manager_method.__name__ = method.__name__
     84             manager_method.__doc__ = method.__doc__

C:\Program Files\Python38\lib\site-packages\django\db\models\query.py in create(self, **kwargs)
    431         obj = self.model(**kwargs)
    432         self._for_write = True
--> 433         obj.save(force_insert=True, using=self.db)
    434         return obj
    435

C:\Program Files\Python38\lib\site-packages\django\db\models\base.py in save(self, force_insert, force_update, using, update_fields)
    743                 update_fields = frozenset(loaded_fields)
    744
--> 745         self.save_base(using=using, force_insert=force_insert,
    746                        force_update=force_update, update_fields=update_fields)  
    747     save.alters_data = True

C:\Program Files\Python38\lib\site-packages\django\db\models\base.py in save_base(self, 
raw, force_insert, force_update, using, update_fields)
    780             if not raw:
    781                 parent_inserted = self._save_parents(cls, using, update_fields)
--> 782             updated = self._save_table(
    783                 raw, cls, force_insert or parent_inserted,
    784                 force_update, using, update_fields,

C:\Program Files\Python38\lib\site-packages\django\db\models\base.py in _save_table(self, raw, cls, force_insert, force_update, using, update_fields)
    885
    886             returning_fields = meta.db_returning_fields
--> 887             results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
    888             for result, field in zip(results, returning_fields):
    889                 setattr(self, field.attname, result)

C:\Program Files\Python38\lib\site-packages\django\db\models\base.py in _do_insert(self, manager, using, fields, returning_fields, raw)
    922         return the newly created data for the model.
    923         """
--> 924         return manager._insert(
    925             [self], fields=fields, returning_fields=returning_fields,
    926             using=using, raw=raw,

C:\Program Files\Python38\lib\site-packages\django\db\models\manager.py in manager_method(self, *args, **kwargs)
     80         def create_method(name, method):
     81             def manager_method(self, *args, **kwargs):
---> 82                 return getattr(self.get_queryset(), name)(*args, **kwargs)
     83             manager_method.__name__ = method.__name__
     84             manager_method.__doc__ = method.__doc__

C:\Program Files\Python38\lib\site-packages\django\db\models\query.py in _insert(self, objs, fields, returning_fields, raw, using, ignore_conflicts)
   1202         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)  
   1203         query.insert_values(fields, objs, raw=raw)
-> 1204         return query.get_compiler(using=using).execute_sql(returning_fields)    
   1205     _insert.alters_data = True
   1206     _insert.queryset_only = False

C:\Program Files\Python38\lib\site-packages\django\db\models\sql\compiler.py in execute_sql(self, returning_fields)
   1390         with self.connection.cursor() as cursor:
   1391             for sql, params in self.as_sql():
-> 1392                 cursor.execute(sql, params)
   1393             if not self.returning_fields:
   1394                 return []

C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in execute(self, sql, params)
     98     def execute(self, sql, params=None):
     99         with self.debug_sql(sql, params, use_last_executed_query=True):
--> 100             return super().execute(sql, params)
    101 
    102     def executemany(self, sql, param_list):

C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in execute(self, sql, params)
     66
     67     def execute(self, sql, params=None):
---> 68         return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
     69
     70     def executemany(self, sql, param_list):

C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in _execute_with_wrappers(self, sql, params, many, executor)
     75         for wrapper in reversed(self.db.execute_wrappers):
     76             executor = functools.partial(wrapper, executor)
---> 77         return executor(sql, params, many, context)
     78
     79     def _execute(self, sql, params, *ignored_wrapper_args):

C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in _execute(self, sql, params, *ignored_wrapper_args)
     84                 return self.cursor.execute(sql)
     85             else:
---> 86                 return self.cursor.execute(sql, params)
     87
     88     def _executemany(self, sql, param_list, *ignored_wrapper_args):

C:\Program Files\Python38\lib\site-packages\django\db\utils.py in __exit__(self, exc_type, exc_value, traceback)
     88                 if dj_exc_type not in (DataError, IntegrityError):
     89                     self.wrapper.errors_occurred = True
---> 90                 raise dj_exc_value.with_traceback(traceback) from exc_value     
     91
     92     def __call__(self, func):

C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in _execute(self, sql, params, *ignored_wrapper_args)
     84                 return self.cursor.execute(sql)
     85             else:
---> 86                 return self.cursor.execute(sql, params)
     87

C:\Program Files\Python38\lib\site-packages\django\db\backends\sqlite3\base.py in execut    394             return Database.Cursor.execute(self, query)
    395         query = self.convert_query(query)
--> 396         return Database.Cursor.execute(self, query, params)
    397
    398     def executemany(self, query, param_list):
OperationalError: database is locked

In [27]: exit
PS C:\Users\Elroy Dell Laptop\Documents\python_stack\python\django\books_and_authors> python manage.py makemigrations
No changes detected
PS C:\Users\Elroy Dell Laptop\Documents\python_stack\python\django\books_and_authors> python manage.py migrate       
Operations to perform:
  Apply all migrations: admin, auth, bookapp, contenttypes, sessions
Running migrations:
  No migrations to apply.
PS C:\Users\Elroy Dell Laptop\Documents\python_stack\python\django\books_and_authors> python manage.py shell
Python 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 23:11:46) [MSC v.1916 64 bit (AMD64)]   
Type 'copyright', 'credits' or 'license' for more information
IPython 7.10.2 -- An enhanced Interactive Python. Type '?' for help.

In [1]: from bookapp.models import *

In [2]: Book.objects.create(title="PHP")
---------------------------------------------------------------------------
OperationalError                          Traceback (most recent call last)
C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in _execute(self, sql, params, *ignored_wrapper_args)
     85             else:
---> 86                 return self.cursor.execute(sql, params)
     87

C:\Program Files\Python38\lib\site-packages\django\db\backends\sqlite3\base.py in execute(self, query, params)
    395         query = self.convert_query(query)
--> 396         return Database.Cursor.execute(self, query, params)
    397 

OperationalError: database is locked

The above exception was the direct cause of the following exception:

OperationalError                          Traceback (most recent call last)
<ipython-input-2-cc6f5b776cf5> in <module>
----> 1 Book.objects.create(title="PHP")

C:\Program Files\Python38\lib\site-packages\django\db\models\manager.py in manager_method(self, *args, **kwargs)
     80         def create_method(name, method):
     81             def manager_method(self, *args, **kwargs):
---> 82                 return getattr(self.get_queryset(), name)(*args, **kwargs)
     83             manager_method.__name__ = method.__name__
     84             manager_method.__doc__ = method.__doc__

C:\Program Files\Python38\lib\site-packages\django\db\models\query.py in create(self, **kwargs)
    431         obj = self.model(**kwargs)
    432         self._for_write = True
--> 433         obj.save(force_insert=True, using=self.db)
    434         return obj
    435

C:\Program Files\Python38\lib\site-packages\django\db\models\base.py in save(self, force_insert, force_update, using, update_fields)
    743                 update_fields = frozenset(loaded_fields)
    744
--> 745         self.save_base(using=using, force_insert=force_insert,
    746                        force_update=force_update, update_fields=update_fields)
    747     save.alters_data = True

C:\Program Files\Python38\lib\site-packages\django\db\models\base.py in save_base(self, 
raw, force_insert, force_update, using, update_fields)
    780             if not raw:
    781                 parent_inserted = self._save_parents(cls, using, update_fields)
--> 782             updated = self._save_table(
    783                 raw, cls, force_insert or parent_inserted,
    784                 force_update, using, update_fields,

C:\Program Files\Python38\lib\site-packages\django\db\models\base.py in _save_table(self, raw, cls, force_insert, force_update, using, update_fields)
    885
    886             returning_fields = meta.db_returning_fields
--> 887             results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
    888             for result, field in zip(results, returning_fields):
    889                 setattr(self, field.attname, result)

C:\Program Files\Python38\lib\site-packages\django\db\models\base.py in _do_insert(self, manager, using, fields, returning_fields, raw)
    922         return the newly created data for the model.
    923         """
--> 924         return manager._insert(
    925             [self], fields=fields, returning_fields=returning_fields,
    926             using=using, raw=raw,

C:\Program Files\Python38\lib\site-packages\django\db\models\manager.py in manager_method(self, *args, **kwargs)
     80         def create_method(name, method):
     81             def manager_method(self, *args, **kwargs):
---> 82                 return getattr(self.get_queryset(), name)(*args, **kwargs)
     83             manager_method.__name__ = method.__name__
     84             manager_method.__doc__ = method.__doc__

C:\Program Files\Python38\lib\site-packages\django\db\models\query.py in _insert(self, objs, fields, returning_fields, raw, using, ignore_conflicts)
   1202         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
   1203         query.insert_values(fields, objs, raw=raw)
-> 1204         return query.get_compiler(using=using).execute_sql(returning_fields)    
   1205     _insert.alters_data = True
   1206     _insert.queryset_only = False

C:\Program Files\Python38\lib\site-packages\django\db\models\sql\compiler.py in execute_sql(self, returning_fields)
   1390         with self.connection.cursor() as cursor:
   1391             for sql, params in self.as_sql():
-> 1392                 cursor.execute(sql, params)
   1393             if not self.returning_fields:
   1394                 return []

C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in execute(self, sql, params)
     98     def execute(self, sql, params=None):
     99         with self.debug_sql(sql, params, use_last_executed_query=True):
--> 100             return super().execute(sql, params)
    101
    102     def executemany(self, sql, param_list):

C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in execute(self, sql, params)
     66
     67     def execute(self, sql, params=None):
---> 68         return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
     69
     70     def executemany(self, sql, param_list):

C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in _execute_with_wrappers(self, sql, params, many, executor)
     75         for wrapper in reversed(self.db.execute_wrappers):
     76             executor = functools.partial(wrapper, executor)
---> 77         return executor(sql, params, many, context)
     78
     79     def _execute(self, sql, params, *ignored_wrapper_args):

C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in _execute(self, sql, params, *ignored_wrapper_args)
     84                 return self.cursor.execute(sql)
     85             else:
---> 86                 return self.cursor.execute(sql, params)
     87
     88     def _executemany(self, sql, param_list, *ignored_wrapper_args):

C:\Program Files\Python38\lib\site-packages\django\db\utils.py in __exit__(self, exc_type, exc_value, traceback)
     88                 if dj_exc_type not in (DataError, IntegrityError):
     89                     self.wrapper.errors_occurred = True
---> 90                 raise dj_exc_value.with_traceback(traceback) from exc_value
     91
     92     def __call__(self, func):

C:\Program Files\Python38\lib\site-packages\django\db\backends\utils.py in _execute(self, sql, params, *ignored_wrapper_args)
     84                 return self.cursor.execute(sql)
     85             else:
---> 86                 return self.cursor.execute(sql, params)
     87
     88     def _executemany(self, sql, param_list, *ignored_wrapper_args):

C:\Program Files\Python38\lib\site-packages\django\db\backends\sqlite3\base.py in execute(self, query, params)
    394             return Database.Cursor.execute(self, query)
    395         query = self.convert_query(query)
--> 396         return Database.Cursor.execute(self, query, params)
    397
    398     def executemany(self, query, param_list):

OperationalError: database is locked

In [3]: Book.objects.create(title="PHP")
Out[3]: <Book: Book object (5)>

In [4]: Author.objects.create(first_name="Lao", last_name ="Tzu")
Out[4]: <Author: Author object (4)>

In [5]: Author.objects.create(first_name="William", last_name ="Shakespeare")
Out[5]: <Author: Author object (5)>

In [6]: this_book = Book.objects.get(id=4)
---------------------------------------------------------------------------
DoesNotExist                              Traceback (most recent call last)
<ipython-input-6-68881ac179cb> in <module>
----> 1 this_book = Book.objects.get(id=4)

C:\Program Files\Python38\lib\site-packages\django\db\models\manager.py in manager_method(self, *args, **kwargs)
     80         def create_method(name, method):
     81             def manager_method(self, *args, **kwargs):
---> 82                 return getattr(self.get_queryset(), name)(*args, **kwargs)      
     83             manager_method.__name__ = method.__name__
     84             manager_method.__doc__ = method.__doc__

C:\Program Files\Python38\lib\site-packages\django\db\models\query.py in get(self, *args, **kwargs)
    413             return clone._result_cache[0]
    414         if not num:
--> 415             raise self.model.DoesNotExist(
    416                 "%s matching query does not exist." %
    417                 self.model._meta.object_name

DoesNotExist: Book matching query does not exist.

In [7]: Book.objects.create(title="Ruby")
Out[7]: <Book: Book object (6)>

In [8]: exit